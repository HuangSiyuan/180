---------------------------------------------

Day 1

---------------------------------------------依赖软件 

sudo apt-get update

sudo apt-get upgrade

sudo apt-get dist-upgrade

ssh-keygen -t rsa

sudo apt-get install openssh-server gnome-session-fallback

sudo apt-get install libqt4-dev ...

./env.sh

---------------------------------------------软件

sudo add-apt-repository ppa:ubuntu-wine/ppa

sudo apt-get update

sudo apt-get install wine1.7

sudo dpkg -i bcompare... TM WPS VM

---------------------------------------------开发工具

iAutoWiki

---------------------------------------------域名设置

/etc/hosts

172.26.10.41    oa-center
172.26.10.20    jupiter
172.26.178.93   igerrit
172.26.178.93   igerrit.storm
172.26.178.153  iwiki
172.26.190.65   iauto ?

---------------------------------------------

Day 2

---------------------------------------------

配置JAVA,JAVAC
  update-alternatives --install ... --config ...

配置git
  git config --global user.name XXX 和 user.email xxx

配置ssh -权限管理
  生成密钥ssh-keygen -t rsa ... /home/iris/.ssh/id_rsa和id_rsa.pub
  本地 ～/.ssh/config 服务器 iauto+igerrit(pub)
  测试 　ssh -p 29418 igerrit.storm 和iauto

配置gcc，g++
  update-alternatives --install ... --config ...

安装repo脚本
  git clone ssh://...   

ngi项目
  repo init -u ssh://...
  repo sync

---------------------------------------------编码规范

顺序 缩进与空行

---------------------------------------------Qt creator基本操作

QWidget(window)-(QHBoxLayout)layout-QSlider(slider) QSpinBox(spinbox)
QObject::connect(spinBox, SIGNAL(valueChanged(int)),
		slider, SLOT(setValue(int))); 
slots(clicked())-signals(findNext/findPrevious)  based on CheckBox
---------------------------------------------

Day 3

---------------------------------------------

任务：Qt GUI Application 四则运算

---------------------------------------------

widget
layout

QObject QCoreApplication QApplication

	QWidget		 QAbstractButton  QPushButton
			 QAbstractSpinBox QSpinBox
			 QAbstractSlider  QSlider
			 QFrame		  QLabel

	QLayout		 QBoxLayout	QHBoxLayout

---------------------------------------------

git:
tree 
git status
git clone ...
git add 
git commit -a -m "description"
git push

make distclean
qmake 
make distclean
rm Makefile.*
rm HSY.pro.user*

---------------------------------------------

Day 4

---------------------------------------------

注意：
calculator & Calculator
LineEdit处理数字: ui->lineEdit->setText(QString::number(num))

---------------------------------------------

Qt学习：
signal & slot & event:   Qt Designer/code  emit

1. connect(sender, SIGNAL(signal), receiver, SLOT(slot));
这里，sender和receiver都是QObject类型的，singal和slot都是没有参数名称的函数签名。SINGAL()和SLOT()宏用于把参数转换成字符串
2. Qt信号槽机制:可以把彼此独立的模块相互连接起来，不需要实现知道模块的任何细节
3. connect()函数是在QObject中实现的，并不局限于GUI.因此，只要我们继承QObject类，就可以使用信号槽机制了

class Employee : public QObject
{
        Q_OBJECT
public:
        Employee() { mySalary = 0; }
        int salary() const { return mySalary; }

public slots:
        void setSalary(int newSalary);

signals:
        void salaryChanged(int newSalary);

private:
        int mySalary;
};

void Employee::setSalary(int newSalary)   //slots
{
        if (newSalary != mySalary) {     //避免递归
                mySalary = newSalary;
                emit salaryChanged(mySalary);  //emit signal
        }
}

---------------------------------------------

calculatorform  - tangwenkai
calculator	- qt examples
lzy 		- network
untitled

---------------------------------------------

timer event -> system
QObject event()
event filter

Qt Designer - qmake .pro (生成pointers, setupUi(), retranslateUi())
Layout
Signal & slots   
Buddy Editing - shortcut
Tab Order
Container
use UI file：三种将UI文件放入代码的方法       ？？？

qt-examples:

四则运算逻辑： double num, num2, num1, times;	bool f_num, f_point; char op; 

文件逻辑：
Qt GUI - QWidget(Calculator)  ->caculator.h(class) calculator.cpp

widget设置:
PushButton 0-9		. 	= 	+-*/	  BACK CE C
LineEdit 

---------------------------------------------

coding - qmake(生成Makefile) - make(生成可执行文件) - ./untitled

---------------------------------------------

Day 5

---------------------------------------------

documents:
calc.ui->ui_calc.h  
calc.h   include "ui_calc.h"  Ui::calc ui;
cal.cpp  include "calc.h"     ui.setupUi(this);  ui.label->setText...
main.cpp include "calc.h"    calc c; c.show();

**http://qt-project.org/doc/qt-5/classes.html
指针 *ui。unexpected ...
QLabel无backspace
bcompare  

QObject::connect(this,SIGNAL(NumClick(int)), this, SLOT(Counter(int)));
on_widget_clicked(); 自动connect

显示整个算式
处理连续运算
内存检测工具 valgrind
**http://blog.csdn.net/sduliulun/article/details/7732906

git(只能跟踪文本文件):
初始化		mkdir
		cd
		git init
添加文件	git add file/. 			添加到暂存区
		git commit -m "description"	提交到分支 - 快照
查看		git status - git diff
**http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000

---------------------------------------------

Day 6

---------------------------------------------

工作内容，遇到的问题以及如何解决的
周一：熟悉编码规范 （例子的变量命名等方面）
周二：熟悉GIT （分支的操作和代码合并，你们可以试着修改对方的代码）
周三：重写QT计算器 （不需要实现小数的四则运算，如果可以重新设计下算法，
简单就行）
周四周五：学习iAuto环境中的app，先看NatvieApp中的Radio

git操作: **新建远程GitHub仓库，练习版本回退、分支管理(dev/bug/feature)操作
版本回退	git log - 历史记录 --pretty=oneline
		git reset --hard HEAD^		版本回退
		git reset --hard [commit id]	撤销 git reflog
		git checkout -- file/.		丢弃工作区修改
		git reset HEAD file/.		丢弃暂存区修改
		git rm file/.			版本库删除文件
远程仓库 1.git remote add origin git@github.com:huangsiyuan/learngit.git 关联
	 git push -u origin master	推送
	 2.git clone git@github.com:huangsiyuan/gitskills.git 从远程库克隆
	 (https,git/ssh)
分支管理  新建dev指针，改变HEAD指向	创建分支
	  master指向dev当前提交		合并分支
	  删除dev指针			删除分支
	  git checkout -b dev (git branch dev + git checkout dev) 创建+切换
	  git branch 查看当前分支
	  git add... commit...
	  git checkout master	切换到master分支
	  git merge dev		快速合并dev分支(丢掉分支信息）
		冲突-手动解决 git log --graph --pretty=oneline --abbrev-commit
		强制禁用（生成新commit）git merge --no-ff -m "..." dev
	  git branch -d dev	删除dev分支 

	  bug分支： git stash 保存现场
		   git checkout master 切换到病分支
		   git checkout -b issue-101 新建临时分支 修复 add commit
		   git checkout master 切换到病分支
		   git merge --no-ff -m "..." issue-101 合并
		   git branch -d issue-101 删除临时分支
		    git checkout dev 切换回分支
		    git stash list   查看保存的工作现场
		    git stash pop (删除stash）/ apply stash@{0}0+ drop
	  feature分支：
		   git branch -D feature-vulcan 删除未合并分支
	  多人协作： *************

编码规范: **对照NativeAPP
1.命名规则
骆驼命名法：
名字中不同的单词之间不需要任何分隔；
从第二个单词开始，每个单词的首字母大写
如果是类型，第一个单词首字母大写
如果是非类成员函数，第一个单词首字母大写
如果是变量，第一个单词首字母小写
如果是类成员函数，第一个单词首字母小写

变量：
临时变量		骆驼命名法
类成员变量		m_ + 骆驼命名法
静态变量		首字母大写的骆驼命名法
全局变量（不推荐使用）	首字母大写的骆驼命名法
常量（包括类成员常量）	每个单词都大写，用下划线分隔

函数：
类成员函数命名：骆驼命名法，首字母小写。
非类成员函数命名：骆驼命名法，首字母大写。

配对命名 (get)/set is/set

2.元素顺序
3.缩进
4.类
不依赖默认访问权限public protected private
不定义public成员变量
5.内存
内存分配-判断是否成功；初始化NULL；判断有效否NULL；释放NULL
6.函数
参数-避免值传递 个数 顺序
多使用内联函数(虚函数x）
const（修饰参数，函数get等)
7.注释
大段代码 #if 0 … #endif
8.控制流
if(){
}
9.代码行
宏中使用括号
比较 （bool-!b）


valgrind: **对照NativeAPP

iAuto环境:

Qt:

---------------------------------------------

Day 7

---------------------------------------------

本次组内主要讲下之前我的学习结果，以便新人后续更快开展工作
1. NGI 目录结构
2. NGI 编译
3. 运行模拟器
4. 从App模板构建App
5. App编译、安装、卸载
6. 调试以及Log
文档稍后输出。

1. git的基本操作还需熟练。明天练习一下多人协作的操作过程。
2. 编码规范中内存分配的原理遗忘较多，多回顾了一些C/C++的知识。
3. 对比NatibeApp中的代码理解了一下编码规范，印象并不深刻。明天对照自己的代码修改一遍。

周一：熟悉编码规范 （例子的变量命名等方面）
周二：熟悉GIT （分支的操作和代码合并，你们可以试着修改对方的代码）
周三：重写QT计算器 （不需要实现小数的四则运算，如果可以重新设计下算法，
简单就行）

对非原生类型
的 内存操作（memset）会因为破坏虚指针而出错这种问题。
C++内存管理


编码规范：
修改代码 
	文件名Sample.h 
	变量名bool-is m_ 
	函数名 成员函数 onCreate 
	常量-宏   		commit failed ??
内存 **http://www.cnblogs.com/lancidie/archive/2011/08/05/2128318.html
	
 内存管理 堆/栈 数组/指针
  栈：函数内局部变量 编译器管理-自动释放  效率高  容量有限 先进后出队列 向下生长
  堆：new/delete    人工管理-手动释放 易泄漏                  碎片多  向上生长
  自由存储区：malloc/free
  全局/静态存储区
  常量存储区：不允许修改

 内存泄漏
  复制构造函数 赋值函数 
  堆内存泄漏-函数中途退出
  常发性 偶发性 一次性（Singleton类） 隐式（服务器）
  对策-标准容器 工具
 内存回收	

valgrind

git操作：
多人协作
    master主分支，时刻与远程同步
    dev开发分支/工作分支，与远程同步
    bug用于在本地修复bug，没必要推到远程
    feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
    
    git remote 查看远程库信息  -v
    git checkout -b dev origin/dev 抓取dev分支到本地
    git push origin dev 推送本地dev分支  若推送冲突,则更新本地库 git pull 
    若合并冲突，则解决冲突，并在本地提交
    再git push origin dev 若本地分支和远程分支的链接关系没有创建 git branch --set-upstream branch-name origin/branch-name。

标签 - 指向某个commit的指针
    分支可以移动，标签不能移动
    新建/删除：
    git tag (-d) v1.0
    git tag v0.9 commit-id
    git tag -a v0.1 -m "version 0.1 released" commit-id
    git tag -s v0.2 -m "signed version 0.2 released" commit-id ??
    查看：
    git tag
    git show v1.0
    推送：
    git push origin v1.0/--tags(所有)
    删除远程 1.删本地 git tag -d v0.9 2.删远程 git push origin :refs/tags/v0.9

修改lichaoye

Qt：
signal/slot/event - 四则运算写法
阅读Native APP

切到master上pull
切到calc_v0.1上
切到dev上 add commit status
切到calc_v0.1上merge dev
push

---------------------------------------------

Day 8

---------------------------------------------

明天多练习一下git操作，关于类的代码规范再检查一遍，继续学习Qt信号槽机
制，编写简单计算器。
周三：重写QT计算器 （不需要实现小数的四则运算，如果可以重新设计下算法，
简单就行）
周四周五：学习iAuto环境中的app，先看NatvieApp中的Radio

1.Qt学习：
信号槽(signal/slot)  具体对象发出signal -> (对应connect)slot函数处理 
  QDial valueChanged()自动emit signal
  QObject::connect(&m_dialLeft, SIGNAL(valueChanged(int)), this, SLOT(on_Left_valueChanged(int)));
    on_Left_valueChanged(int)自定义槽函数
Qt class结构 怎么查看??
  QObject - QWidget - QLabel - ... 继承关系 构造函数 虚函数 ...
  singleStep pageStep wheelScrollLines ...
Native App涉及的Qt技术 （未看）
2.重写计算器 熟悉API的查找：
不用Qt Designer。在calculatorform基础上，将QSpinBox改为QDial(鼠标滚轮可改变输入数值）：修改wheelScrollLines属性（鼠标滚轮步长改为1），setNotchesVisible为true（QDial的刻度置为可见),添加QLabel实时显示QDial数值（signal+slot）/ 自定义widget(QLabel+QDial)实时显示(event未完成)
3.Native App构建：
.repo 内含多个git仓库
涉及的shell命令 source ln
/etc/ld.so.conf ?? 
/usr/lib/libGL.so ??

错误 /usr/bin/ld:cannot find lGL
1.符号连接错 /usr/lib/libGL.so - ln -s src dst
2.未安装函式库 无/usr/lib/libGL.so - apt-get

！编译环境32bit

4.shell、makefile：



事件(event)  事件队列 - 自定义组件
event - 用户操作/系统（计时器）
exec()后 - 进入事件循环来监听应用程序的事件
QDial无setText ??

当事件发生时，Qt将创建一个事件对象。Qt的所有事件都继承于QEvent类。在事件对象创建完毕后，Qt将这个事件对象传递给QObject的event()函数。event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数(event handler)。

git操作熟练：x
代码规范-类/内存：x

---------------------------------------------

cat du which mkdir mv chmod update-alternatives(editor,--display --config --install) 目录删除记录 chown scp whereis source

source/.  在当前bash环境下执行filename中命令 - 脚本中set变量直接起效   filename可无执行权限
sh/bash   打开一个子shell（同时启动一个命令解释器）执行filename中命令  filename可无执行权限
./        打开一个子shell（同时启动一个命令解释器）执行filename中命令  filename要有执行权限

lunch envsetup.sh里定义的一个命令，用于选择编译项

---------------------------------------------

Day 9

---------------------------------------------

1. shell、makefile学习：学习编写makefile - 计算器   书写规则 + 书写命令 + 使用变量 + 使用条件判断 + 使用函数 + make运行 + 隐含规则 + 使用make更新函数库文件 
编译时，编译器需要的是语法的正确，函数与变量的声明的正确
链接时，主要是链接函数和全局变量
  源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error）
---------------------------------------------
**target ... : prerequisites ...
	command
	...
**prerequisites中如果有一个以上的文件比target文件要新，或者target不存在的话，command所定义的命令就会被执行;label-要执行其后的命令，就要在make命令后明显得指出这个lable的名字

---------------------------------------------
**make是如何工作的    **各种依赖关系
在默认的方式下，也就是我们只输入make命令。那么，
    make会在当前目录下找名字叫“Makefile”或“makefile”的文件。
    如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。
    如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。
    如果edit所依赖的.o文件也不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）
    当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生成make的终极任务，也就是执行文件edit了。 

GNU的make工作时的执行步骤如下：（想来其它的make也是类似）

    1.读入所有的Makefile。
    2.读入被include的其它Makefile。
    3.初始化文件中的变量。
    4.推导隐晦规则，并分析所有规则。
    5.为所有的目标文件创建依赖关系链。
    6.根据依赖关系，决定哪些目标要重新生成。
    7.执行生成命令。 
1-5步为第一个阶段，6-7为第二个阶段。第一个阶段中，如果定义的变量被使用了，那么，make会把其展开在使用的位置。但make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系的规则中，那么仅当这条依赖被决定要使用了，变量才会在其内部展开。 

clean从来都是放在文件的最后
在Makefile中的命令，必须要以[Tab]键开始
---------------------------------------------
变量$(objects)/自动推导- 隐晦规则
.PHONY : clean
clean :
	-rm edit $(objects) - 伪目标文件 （-无视错误）
Makefile的文件名：make的“-f”和“--file”参数，如：make -f Make.Linux
引用其它的Makefile：include foo.make *.mk $(bar) （-无视错误） etc...


Qt .pro怎么处理？？ - 不用
Qt库文件怎么处理？？  INCPATH LIBS ->未定义的引用 ** 没加路径
命令行方法：
moc Calculator.h -o moc_Calculator.cpp
g++ -o Calculator main.cpp Calculator.cpp moc_Calculator.cpp -I. -I/usr/include/qt4 -I/usr/include/qt4/QtGui -L/usr/lib/x86_64-linux-gnu -lQtCore -lQtGui

MOC(元对象编译器)把信号signals和槽slots部分编译成C++语言

Calculator : $(objects)   -degub.. **没加执行文件
	g++ -o Calculator $(objects) $(INCPATH) $(LIBS) - 路径竟然加在这儿！

clear/reset 清屏

不会调bug，终端的也不会

2. Native App：完成Native App构建；阅读Radio
不make emu开不起
adb push out/target/product/generic/system/apps/Radio.cpk /tmp/Radio.cpk && cpki -fi /tmp/Radio.cpk
emu/ckp/adb是临时文件？？

.ui NGQImageLabel/NGQTextLabel/NGQFrame/NGQImageButton/NGQRuler/NGQStaticList/...

find/which/locate-查找文件
tree-查看结构 
  tree -L 2 > ～/tree.txt 将当前文件的第二级子目录的目录结构信息输入保存到～/tree.txt文件中
  -P pattern    List only those files that match the pattern given.
  -I pattern    Do not list files that match the given pattern.

阅读main.mk
du -sh ~/Downloads 查看文件夹大小,后面的文件夹路径需要完整路径

3. Qt学习：Qt class结构(继承关系、构造函数、虚函数等); event 自定义组件

4. coursera

git操作熟练：
代码规范-类/内存：

---------------------------------------------

Day 10

---------------------------------------------

1. makefile学习 书写规则 使用条件判断 函数使用 - main.mk
2. 仔细阅读Radio代码 
在Ubuntu中，安装Windows程序用wine，然后用wine安装Windows软件即可 ~/.wine/
source insight看代码结构 x
阅读文档、测试用例 x*

3. 学习2涉及的Qt知识 demo x*
4. Qt学习：参照http://qt-project.org/学习Qt class结构(继承关系) x

cc gcc -I参数

书写规则 使用条件判断 函数使用 - main.mk
objects := $(wildcard *.o) objects的值  关键字 wildcard patsubst

文件搜寻 VPATH = src:../headers
	vpath %.h ../headers

伪目标 .PHONY : all 功能 生成多个目标；清除不同种类文件

libs_for_gcc = -lgnu
normal_libs =

ifeq ($(CC),gcc)
  libs=$(libs_for_gcc)
else
  libs=$(normal_libs)
endif

foo: $(objects)
        $(CC) -o foo $(objects) $(libs)
ifdef只是测试一个变量是否有值

自动化变量“$@” - 运行时

$(<function> <arguments>)
${<function> <arguments>}
字符串处理函数：
$(subst <from>,<to>,<text>) 字符串替换函数 把字串<text>中的<from>字符串替换成<to>。
指定编译器对头文件的搜索路径参数CFLAGS override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
文件名操作函数：
foreach函数：
if函数：
call函数：$(call <expression>;,<parm1>;,<parm2>;,<parm3>;...)
origin函数：我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它
shell函数：它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数返回
控制make的函数：error warning

另开t - adb devices

git push HSY master

adb在X-CODE下跑，别的呢 adb shell cpki -fi /tmp/Radio.cpk (adb下shell命令）

git仓库下再创建git仓库 错误多

---------------------------------------------

Day 11

---------------------------------------------

上周：
1. 学习git操作
   新建远程GitHub仓库；练习版本回退、分支管理(dev/bug/feature)操作、多人协作；标签操作
2. 阅读编码规范
   修改自己的代码（文件名、变量名、函数名、常量改为宏）
   **C++内存管理知识：
      内存管理（堆与栈区别、数组与指针区别）
      内存泄漏（容易发生泄漏的地方与避免泄漏的对策）
      内存回收（未看）
3. Qt学习：
   signal/slot（结合代码练习）event（仅阅读）
   **参照http://qt-project.org/学习Qt class结构(继承关系、构造函数、虚函数)
   重写计算器（熟悉Qt API）在calculatorform基础上，将QSpinBox改为QDial(鼠标滚轮可改变输入数值）
      a. 修改wheelScrollLines属性（鼠标滚轮步长改为1）
      b. setNotchesVisible()为true（QDial的刻度置为可见)
      c. 添加QLabel实时显示QDial数值（signal+slot已实现）/ 自定义widget(QLabel+QDial)实时显示(event未完成)
4. shell、makefile学习：
   使用变量、隐含规则、书写规则、使用条件判断、函数使用 简单对照NGI项目的main.mk
   学习qmake生成的Makefile，编写计算器makefile
5. Native App构建：
   NGI项目编译；EMU运行；NativeApp构建
   学习指令source（./sh/bash/./)、ln
   新建基于NativeAppTemplate的App，完成Native App的安装、卸载、调试。

心得：
上午学习Qt时进度比较慢（不过总算解决了自己的疑点），导致Native App构建没
完成，明天加油。
1. 仔细阅读Radio代码
**2. 学习1涉及的Qt知识
**3. 编写makefile时出现忘加路径等错误，理解、检查不仔细
**4. 查看终端错误信息的能力较弱，多练习


本周：
1. 创建自己的分支并推送
2. nutshell架构学习
3. App编写-基于QTFramework的计算器
4. 学习进程间通信、多线程编程等

今日：
1. 培训：
   nutshell架构 git&repo学习
   App构建（App laucher、App resource-URI)
2. Simulator调试界面、一些软件功能 sim_sdk
3. 阅读Radio代码，文档、测试用例、debug 
4. 3涉及的Qt知识 - demo 5
5. UIFramework学习（继承关系、虚函数）：
   利用UIFramework编写简单App（控件+事件）


nutshell架构：
tmap??
第三方库/已有库 
开发的库
iAuto - intent manifest - 注册时间
RFC

App构建：
编译安装控件
lunch simulator - userdebug
choosetype - debug
make -j4 libFramework
QtFramework - ./InstallPlugin -d 安装控件至Qt
Base/Tools - ./CreateApp -n -c ... 

detached - 无分支 git branch -b master

无NGResourceManager.h
locate查找文件
echo $PROJROOT
PROJROOT 环境变量修改 vi /etc/profile.d/smartiauto.sh
QT creator - Project 暂时修改

make: *** [out/debug/target/product/simulator/obj/EXECUTABLES/init_intermediates/init.o] 错误 1:
vi system/core/init/init.c
#include <sys/resource.h>

window-output panes-compile output

cd -

缺少.so - make

---------------------------------------------

Day 12

---------------------------------------------

1. Qt designer中添加NG控件 - ll plugins+软连接
ll plugins/designer/
sudo tar -zxvf ~/Desktop/designer.tar.gz -C plugins/designer/
创建软连接：
/usr/lib/qt4$ sudo ln -s /usr/lib/x86_64-linux-gnu/qt4/plugins .  符号连接/软连接 源->目标 .当前目录
删除软连接：
/usr/lib/qt4$ sudo rm -rf symbolic_name(plugins)
ctrl+c: 取消??

打开程序 Alt+F2
修改可执行文件路径 - bin
  vi ～/.profile 修改  export QTCREATOR="/opt/qtcreator_2.5.2-0ubuntu1_amd64/usr/bin"
		   export PATH=$QTCREATOR:$PATH

2. 阅读Native App代码 文档、测试用例、debug 
3. 学习2涉及的Qt知识 
4. UIFramework学习（继承关系、虚函数）：
   利用UIFramework编写简单App（控件+事件）

.pro TARGET
make clean
release编译+debug编译

Native App - 动态库
1. 添加控件
2. 设置属性(designer x ??) result->setText(num1->text());
3. view加载widget ??  **NGQView和NGQWidget区别 onInitilize() onshow()...
   connect - NGQView无connect
   NGQView中加widget闪退  

---------------------------------------------

Day 13

---------------------------------------------

git init
git remote add origin git@...
git remote/git branch -r
git remote -v
git pull
git checkout master \   //git branch无结果 Branch master set up to track remote branch master from origin.
git checkout -b Iris
git push origin Iris
git branch --set-upstream Iris origin/Iris 

1. 阅读Native App代码
   文档、测试用例、debug
2. QtFramework学习：编写简单App 
   NGQView与NGQWidget区别
   添加事件
   各常用类间继承关系

Native App黑 - AppResource加载是否正确

阅读源代码：Ctags+Tag List +Win Manger+Cscope
	qt creator - ctrl+\

AppLauncher理解

换控件NGQProgressBar
setImage - AppResource
自定义控件

---------------------------------------------

Day 14

---------------------------------------------

setImage - AppResource的处理 x
自定义控件 x
博客 - 代码阅读(接口、继承) x

APUE阅读：
1. apue.h配置
   http://www.apuebook.com/下载src.tar.gz源代码的压缩包
   解压至/home/user/目录下
   修改 Make.defines.linux中的WKDIR=/home/xxx/apue.2e，为WKDIR=/home/user/apue.2e
   返回至apue.2e/std目录下面，修改linux.mk，将里面的nawk全部改为awk，可以使用这个命令 ：%s/nawk/awk/g 
   make
   将/home/user/apue.2e/include/apue.h和/home/user/apue.2e/lib/error.c复制到/usr/include目录下
2. FileSeg 简单demo
   文件分割：
      输入：文件路径
      输入：分割块大小，默认值 （自定）
      输入：分割路径，默认值 （自定）
      输出：分割好的文件 及 其他（自定）
   文件合并：
      输入：分割好文件的目录
      输出：合并好的文件

open, argc/argv, read, write x

3. myMakeFile改进 x

今天的总结：
1. 阅读UNIX环境高级编程
    配置了下apue.h；给vim装了Ctags+TagList +WinManger+Cscope 方便学习
    学习文件&系统API部分
2. 编写文件分割小demo （read还有bug）
    学习open, read, write函数和命令行参数操作
3. 参加公司培训，准备明天的考试
    NAVi导航器开发流程、质量保证简介、UI开发流程

---------------------------------------------

Day 15

---------------------------------------------

原定的unix环境高级编程自己业余时间学习吧（1.文件&系统API， 2进程&进程间通讯， 3线程和多线程编程和信号量锁等， 4网络编程等）
最近的学习计划时间比较紧迫，主要方向是qml+js，目标能用使用qml构建简单的画面（比如音乐播放界面）
附件是QML学习小结和QML的学习文档
相关网站（学习QML主要还是QT的官网吧）：
http://qt-project.org/doc/
http://qt-project.org/doc/qt-5/qtquick-demos-calqlatr-example.html

今天：
1. 培训
   讲课 - 操作式样书 UML入门
   考试 - Navi开发流程 

2. QML学习
   博客+官网：what, why, how, run
   使用qml构建简单的画面（比如音乐播放界面）
   readme Template ??

3. APUE
   文件&系统API
   进程&进程间通讯

4. Qt其他特性学习 （继承...）

QML - 结合了QtDesigner UI和QtScript的优点  QtQuick（Qt4.7.0中的新特性）核心组件之一
      能跟Qt写的C++代码进行方便的交互
      可以在脚本里创建继承于QObject的图形对象，并且支持各种图形特效，以及状态机等

      Qt元对象系统 - 信号槽和内省/反射 - 动态meta-information
     		     Qt工具moc->通过定义Q_OBJECT宏实现到标准C++函数的转变

      这种机制工作过程是：
         首先，Q_OBJECT宏声明了一些QObject子类必须实现的内省的函数，如metaObject()，tr(),qt_metacall()等；
         第二，Qt的moc工具实现Q_OBJECT宏声明的函数和所有信号；
 	 第三，QObject成员函数connect()和disconnect()使用这些内省函数实现信号槽的连接。
 	 以上这些过程是qmake，moc和QObject自动处理的，你不需要去考虑它们。如果实现好奇的话，可以通过查看QMetaObject的文档和moc的源代码

动作、性质的继承、动画、自定义QML-重用
qmlscene不能使用 - 配置Qt 5环境
官网记事本demo x

---------------------------------------------

Day 16

---------------------------------------------

1. 培训 0.5
讲课：基本设计、详细设计简介
评讲：Navi开发流程
$$ 复习UML 0.5
2. QML学习
@@ 阅读代码  视频、文档 readme Template ??  1.5 x
安装相关开发工具 - QMLscene
@@ 阅读官网QML入门教程 - note demo 1 x

3. APUE x
   $$ 文件&系统API 1
   $$ 进程&进程间通讯 1

4. @@ Qt其他特性学习 （继承...）1 x

5. Obgio iAuto_For_SDL
项目编译需cmake 2.8.11+
apr-utils ./configure 提示无LDAP lib 
   sudo apt-cache search ??

头文件缺失
find . search xxx.cpp
memmove strcpy ... <string.h>
fputs stderr ... <stdio.h>

Qt Quick - Qt 4.7+
元素 Item -> Rectangle ...
     State ... 
     属性：width: parent.width, source: "xx.jpg"， id

硬编码 x：-number 相对parent
anchor布局管理 - 只能在兄弟元素之间或者直接父子之间使用anchor
布局器-Grid, Row, Column

信号槽 - 观察者模式

---------------------------------------------

Day 17

---------------------------------------------

1. 培训
   讲课 - Design使用简介(Layout分析、工具使用)、单体测试简介
   $$ 复习 - 基本设计、详细设计
2. @@ QML学习
   编写记事本demo
   学习examples - samegame (逻辑用JS)
3. @@ NGI学习
   架构、模块
   samegame移植到emulator上
4. $$ APUE
5. C++、SHELL
6. 测试
   
---------------------------------------------

Day 18

---------------------------------------------

1. 培训 
   讲课 - CheckList使用方法 1
   练习 - 操作式样书、CheckList 1
2. QML+JS 1
3. 阅读代码-UI 架构 1
4. C++、SHELL 2
VirtualBox全屏 - Additional...
---------------------------------------------

Day 19

---------------------------------------------

公司共享 - \\solar

1. 培训 - 测试练习（DesignCheck、CheckList)
2. APUE
   SHELL  文件分割
3. QML与C++混合编程
   C++   自动化编译测试
4. 测试

---------------------------------------------
APUE.note

登录 - 口令文件 /etc/passwd
root:x:0:0:root:/root:/bin/bash
登录名：（加密口令：*数值用户ID205：数值组ID105）：注释字段：*起始目录：*shell程序
root - 大多文件权限检查不再进行
每个文件 - 用户ID、组ID
口令文件 - 登录名-用户ID映射
附加组 - /etc/group前16个

不用缓冲的IO buffsize选取
标准IO

shell - 命令解释器
为每个程序打开3个文件描述符（可重定向）

6个exec中的一个由内核将程序读入存储器，并使其执行
fork被调用一次，返回两次

控制字符

1-5?? 类shell程序
---------------------------------------------

open("argv[1]...  x - 无引号
string to int - atoi
段错误 核心已转储 strcat

   文件分割：
      输入：文件路径
      输入：分割块大小，默认值 （自定）
      输入：分割路径，默认值 （自定）
      输出：分割好的文件 及 其他（自定）
   文件合并：
      输入：分割好文件的目录
      输出：合并好的文件

Layout、psd区别：layout多一些非图层的字段(解释图层的类别等）
安装 - 插件（字符转换）\\pset-ui-ds\soft\other\applocale
打开layout文件 - 路径不能有中文

---------------------------------------------

Day 20

---------------------------------------------

Rectangle(color) - Image(source)
QML编写音乐播放器界面

---------------------------------------------

Day 21

---------------------------------------------

1. Native App - image资源、尺寸等
2. 界面编写：硬编码 -> float
3. 测试技能考试2
4. portal dlut注册、第二课堂计算、plan

gimp测量
Designer做图
文件结构
复用 - Button.qml、Song.qml(Text x)
ListView添加 x

---------------------------------------------

Day 22

---------------------------------------------

1. QML学习：
   QML与C++混合编程
   音乐播放器：实现点击按钮 - 调用C++代码实现打印输出

结构：
QML引擎 -> 建立树
QtQuick - 包含Item, Rectangle ...
child - gradient / implicite 实现

Object Attributes:
id - default exists
custom - C++ 生成 / derive from exists-见下 (初始赋值/JS赋值)
	property color nextColor
	property int someNumber
	property var someObject: Rectangle { width: 100; height: 100; color: "red" }
	property var someObject: Rectangle { width: 100; height: 100; color: "red" }
	**var: a generic placeholder type


special - list(states/property list<<objectType>> propertyName: <value>)

property用法 ??
可重用.qml+Image source - QQmlApplicationEngine failed to load component 
	             "./T1.qml": no such directory  QmlApplicationEngine ??

qrc编写 <file>images</file>

Item无onClicked

---------------------------------------------

Day 23

---------------------------------------------

1. 改进QML-MusicPlayer:
    底部增加一个按钮实现大小music界面的切换 (小界面400*200)
2. iAuto_For_SDL学习
    编译iAuto_For_SDL
    学习凯哥编写的SDLPlayer
    将自己的MusicPlayer实装到模拟器

QML中使用C++函数：C++编写 main.cpp注册 main.qml（引入 声明类 使用）  
QML基础：状态states(when)、过渡transitions(duration)基于状态		   

Item无onClicked x
ListView加入 x
C++动态加载QML文件 x
property alias使用、作用 x --特定属性

minehunt学习 C++/QML
QML engine学习 component??组件 运行时??

---------------------------------------------

Day 24

---------------------------------------------

1. QML基础学习
   C++动态加载QML文件 画面迁移-loader **C++类、继承 logic
   学习QML的数据模型(ListModel/ListView) Property **MVC??
   鼠标效果、多点触控?? how to
   学习QML+简单JS(参考Qt Creator中的实例)  
2. iAuto_For_SDL iAuto_For_Qt5 视频 - 公司
3. ABS Guide
4. 数据结构与算法

/usr/bin/ld: cannot find -lGL
collect2: ld returned 1 exit status
make: *** [RGBGame] Error 1
--QGUIApplication 64bit

QCoreApplication -> QGuiApplication -> QApplication
QQmlEngine加载QML组件(QQmlComponent/QQmlContext) -> QQmlApplicationEngine

单例??

-- Connections对象 连接目标对象和信号处理器  QML
-- C++访问QML属性  QObject::findchild() / QObject::findchildren()
		QQmlComponent::create() QObject::setProperty() / QQmlProperty （显示??）
		QQuickView QQuickItem 					(用window不显示??)
   C++访问QML函数  QMetaObject::invokeMethod()可以调用QML中的函数 函数参数返回值被转换为QVariant 
		   QObject::connect

QQuickView提供了一个显示用户界面的窗口,而QQmlComponent没有

**QML Loader：动态加载QML loader的source属性 myloader.source: "page1.qml"
**model定义了要被显示的数据，delegate定义了如何显示数据

main loader (small/big)  ListView不能动?? loader载入QML但listview未载入??
     states		 ListView能动  
**loader + focus: focus:true 焦点问题！！

QML调试： onClicked: console.log("clicked!!!!!")
	  Qt帮助文档 qt4-doc
Qt5新特性 JS采用V8引擎 ... http://www.cnblogs.com/li-peng/p/3655838.html
导致空白原因：QtQuick版本 main.cpp加载QML方式

QML与Qt UI整合: QDeclarativeView x

今天：
1. 改进Music Player:
使用loader切换画面(qml文件)
添加ListView(歌曲列表 名字+图片)
2. 学习QML
QML与C++混合编程:
QML中连接C++信号与槽、C++访问QML属性、函数  练习x

明天：
C++扩展QML属性
QML调试(参照官网的建议)
QML与Qt UI整合: QDeclarativeView  可行??

---------------------------------------------

Day 25

---------------------------------------------

QML与C++混合编程: QML中连接C++信号与槽、C++访问QML属性、函数

明天的计划：
C++扩展QML属性
QML调试(参照官网的建议)
QML鼠标、焦点

感想：
之前只是编写单个画面，学习切换画面之后，各画面、控件间的焦点问题没有注意
编写QML时，养成F1看帮助文档、多打log的习惯吧
Qt5的一些特性Qt4不能使用，真是不方便啊


"#!",这意味着告诉你的系统这个文件的执行需要指定一个解释器
`pwd` != "$LOG_DIR"  ` ??
source/. *.sh 退出 ??
UID不同历史命令不同

--172.26.10.69/17CY
Item与Rectangle区别
1. 时间倒计时
2. bar - transitions
3. button states 暂停 - 1、2不动

lunch full-eng 32bit
      simulator-userdebug 64bit 

出错libnc... --cat /external/...mk  make lib

---------------------------------------------

Day 27

---------------------------------------------

QML练习：
1. 实现模拟倒计数 (未实现时间) Timer?? QDateTime?? JS?? 第三方?? 别的实现Debian Desktop Meego??
**attrs.counter/60 + ":" + attrs.counter%60
QString取整?? 强转?? arg格式化
**Date().getMinutes().toString()
qrc:///test.qml:19:27: Unable to assign double to QQuickItem*
qrc:///test.qml:53: TypeError: Property 'getMinutes' of object 周二 9月 9 10:20:39 2014 GMT+0800 is not a function
QML包含哪些JS?? Math.floor(attrs.counter)取整 补零 JSfunction QML中的JS必须声明

2. 实现进度条 (进度条的速度与长度仍有bug)
时间与进度条不能同步 -> 计算问题 attrs.counter在变，不能将frameRect.width/attrs.counter作为度量 
点击start仍增长刻度条 button onClicked动作-check attrs.counter > 0

3. 实现play、pause按钮控制以上的工作与暂停

推送到模拟器(或者实机)
# adb push out/target/product/generic/system/apps/GLSettingX.cpk /tmp/GLSettingX.cpk
安装
# cpki -fi /tmp/GLSettingX.cpk

登录设备
# adb shell
设置打印级别		
# logcfg -c *:D
过滤打印信息
# logcat -s Generic


4. Crawler - standard description
5. resu -> 
6. Japanese
7. adb

shell、Algorithm： 		

---------------------------------------------

Day 28

---------------------------------------------

1. 完成练习剩下的界面部分
2. 增加state，使界面的逻辑更清晰 - iAutoQt5中只能用property bool xx判断状态，否则if表达式永不成立??
3. 把硬编码改掉
4. 实现play、pause按钮控制以上的工作与暂停 - visible = true/false实现
5. 希望能安装至模拟器运行 - QML中的JS函数需放在最大元素中 ?? 
iAutoQt5调试 logcat + console.log出来在哪?? adb??

qtcreator bin 
  vi ～/.profile 个人系统变量修改
		       export QTCREATOR="/opt/qtcreator_2.5.2-0ubuntu1_amd64/usr/bin"
		       export PATH=$QTCREATOR:$PATH
ubuntu美化 窗口管理器  mod4/super/win
鼠标样式
Qt for android
shell、Algorithm
Crawler - standard description
resu -> 
Japanese

---------------------------------------------

Day 29

---------------------------------------------

iAutoQt5中涉及state、鼠标等的判别式不能用?? 只能用property bool xx判断状态?? QtQuick.Controls 1.1 

repo sync
iAutoQt5调试 logcat + console.log出来在哪??
QML整理 J8??
Qt for android todolist
QML练习-改进：进度条能鼠标拖动位置
Qt C++ 鼠标

iAutoQt5 QmlFramework??
Qt5 帮助文档??

浴沙 slippers 附近food 特 
熊猫吃屎
TED
shell、Algorithm
Crawler - standard description
resu -> 
Japanese

QML：
加载.qml window??

粒子效果 sprite x 帧动画x

---------------------------------------------

Day 30

---------------------------------------------

1. Qt for Android - 官网
2. QML中使用C++
3. qt5_sdk安装
4. check iAutoQt5
5. crawler
6. LeetCode

C++中使用QML QML Rectangle objectName: xxx
QML中使用C++ C++ 继承自QObject 各种宏

---------------------------------------------

Day 31

---------------------------------------------

QML、C++、JS基本的混合编程已经学会了，涉及Handler、一些事件的混合编程没有尝试，回去总结一下、思考一下该怎么做吧
Qt C++的调试比较费劲，回去阅读一下官网的资料、下周多练习吧
今天安装了nutshell/qt5分支SDK，能够直接拖控件，感觉公司的人好厉害，多多学习！

本周：脚本JavaScript、shell(...)、LeetCode 本周:file,IPC,thread,socket
1. 项目名称(post13)、nutshell架构(MCU-kernel/BSP-system(lib/deamon)-framework-application 
   xx->APUE
   QML+JavaScript+C++ 难点、突破
2. shell、JavaScript、网络编程

3. LAMP MySQL (JS, Crawler) online purchase??
4. volunteer - translator
5. project(SDN、Subway Timer)

1. 
编译控件(版本-simulator、编译依赖的库libFramework、安装控件-脚本) -> Qt creator
App Launcher -> App (native-app libXXX.so??) 自定义资源(语言、图片) -> 生成.dat xx.h
调用底层 Manifest.xml(Intent) main.cpp(重载void onIntent())
       / include "xx.h" extern "C" Q_DECL_EXPORT NQDvdAPI * GetNQDvdAPI(); signal void initsignal() 连接

2. 
shell：命令在特定目录可用 AppCreator.sh
JS: Qt调用JS （J8)

    　　（1）借鉴C语言的基本语法；

    　　（2）借鉴Java语言的数据类型和内存管理；

    　　（3）借鉴Scheme语言，将函数提升到"第一等公民"（first class）的地位；

    　　（4）借鉴Self语言，使用基于原型（prototype）的继承机制。

函数内部能直接读取全局变量
函数外部不能读取内部局部变量 （需闭包读取）
函数内部声明不加var -> 全局变量

内建对象 Array Math Date /Math.round
宿主对象 Web应用 -> 浏览器 Form Image Element document
每个节点都是一个对象
<p>元素里的文本-第一个字节点description.childNodes[0].nodeValue  id可直接作为var??

---------------------------------------------

Day 32

---------------------------------------------

DOM core - getElementById getElementsByTagName getAttribute setAttribute (处理.html,.xml...)
HTML~DOM - document.forms对象 element.src属性 (只Web文档) document.body...

内建函数 alert

---------------------------------------------

Day 33

---------------------------------------------

培训：
	开发流程 
iAuto：
	邮件看懂 qtforAndroid(QML能跑??)
Japanese:
	plan  x
wordpress:
	换模板
campus:
	crawler - job description / target position  tencent 
	larbin zhihuCrawler (thread lock ...太高级，看不懂) x
学习JavaScript：
	JavaScript DOM编程艺术 100%


动态创建标记: document.write(str) / xxx.innerHTML (JS与html分离)

浏览器 - DOM节点树

创建节点var para = document.createElement("p") 
连接到xxx.html document.getElementById("testdiv") testdiv.appendChild(para) 
/document.getElementById("testdiv").appendChild(document.createElement("p"))
document.createTextNode
xxx.parentNode.insertBefore(qian, hou); 无insertAfter xxx.nextSibling

Ajax 异步JavaScript and XML - XMLHttpRequest对象

---------------------------------------------

Day 34

---------------------------------------------

画面：范全龙（AM/FM）胥江（CD/DVD） 黄思远（USB） 李朝野（iPod） 仵星（home/VTR/AUX）
      flow图：\\172.26.10.69\Projects\17CY\先行开发（MMAS）\17CY先行開発画面.xlsx
      详细式样：\\172.26.10.69\Projects\13CY\日方资料\13CY仕様書（整理版）\画面仕様書\Media\4-4013-00-T【最新】13CY 北米トヨタ向けオーディオHMI仕様書 ver.1.4\
       各source调用接口可以参考：packages/NativeApp/AV下各source的代码
绘制画面-USB
1. flow图逻辑
2. 绘制USB-Music基本操作画面
3. 尝试使用JS切换qml文件、JS建立qml对象

---------------------------------------------

Day 35

---------------------------------------------

绘制画面-USB
1. 迁移、逻辑 
   JS-createComponent, deleteComponent??Component如何消亡??
   共用控件 参考Qt5_Example /opt/Qt5.3.1/Examples/Qt-5.3/quick/shared/
2. JS调用C++ - website, examples, native app
   C++(Qt)调用JS：QtScript包含V8引擎，QtQuik用QtScript作为引擎 不能include <QJSEngine>??
   JS调用C++：
3. QmlFramework - 自定义控件
   QML引擎, 生成对象与声明的顺序??
4. slide down - OpenGL??
   AnimationController - ParallelAnimation
5. Qt for Android (QML) sdk安装中
   http://qt-project.org/wiki/Qt5ForAndroidBuilding
6. LeetCode
7. Japanese
8. server - huangsiyuan-pc
9. smartdevicelink D-bus bluetooth wifi JSON
10. volunteer - translator
11. JS权威指南 
   Sublime Text3+Package Control+SublimeClang
   http://code.google.com/p/v8/wiki/UsingGit  shift+ctrl+p为何没有??
   V8安装 V8 C++/JS 编译出错??
   JS生成html元素、控制html元素/CSS(.style.display, .style.visibility) 时间处理函数
12. wordpress换模板
13. crawler(JS)
   https://github.com/sylvinus/node-crawler
   thread
14. Android plugin - power manager(plan to do)

touch 文件名 ——创建一个空文件
重命名文件（夹） / 移动文件（夹）到指定文件夹 mv source destination / rename

---------------------------------------------

Day 36

---------------------------------------------

1. 培训 - 开发工具
iwiki.storm - 开发环境、project list
->igerrite(trigger)->ici(BASE jenkins持续集成)
浏览器 		     编译x Reviewx
2. 绘制画面 
   阅读QmlDemoApp testQml3 - 切换画面
3. C++调用JS #include <QJSEngine>
   JS调用C++ ??参照QmlDemoApp mist??
4. QmlFramework - C++、JS自定义控件
5. smartdevicelink D-bus bluetooth wifi JSON

6. LeetCode Threading and Concurrent 

7. JS权威指南 
8. crawler(JS)
   https://github.com/sylvinus/node-crawler
   thread
   git clone git@github.com:huangsiyuan/node-crawler.git
   npm - Node.js的模块依赖管理工具
9. wordpress换模板
10. Android plugin - power manager(plan to do)
11. Japanese
12. volunteer - translator
13. resume、xuanjiang list

JS区分大小写 html不区分 xhtml区分
JS标识符打头 字母/下划线/$ - 严格模式保留字更多 - 不同运行环境（不同全局属性列表）
JS数据类型 - 原始类型  数字、字符串、布尔值、null/undefined
	     对象类型  属性的集合 数组 函数 全局对象

---------------------------------------------

Day 37

---------------------------------------------

1. 绘制画面 - USB 
   阅读QmlDemoApp testQml3 - 使用mist切换画面
   MIST学习（参照cmstest3.pset.suntec.net）
2. 培训
   Coding&UnitTest
   CI - 阅读编译检查脚本 x - ici打不开??

动态空间管理：
避免野指针（数组扩容）- 封装为vector
insert前, 判断是否需扩容

置乱器：
直接引用元素[] rand

查找：
判等器

---------------------------------------------

Day 38

---------------------------------------------

ubuntu下virtualbox扩容 新建hd
windows下扩容 VBoxManage.exe list hdds
	      VBoxManage.exe modifyhd 3a28f0c2-c71a-4aeb-a1c4-30cb3294bb81 --resize 15360
	      sudo apt-get install gparted / sudo gparted
	      -> ext4

1. MIST学习（参照cmstest3.pset.suntec.net）
2. 培训 bug流程&机能测试
3. 列出需要的接口
4. 完成画面的切换

---------------------------------------------

Day 39

---------------------------------------------

1. 所有画面/QmlComponents - qrc+qml+JS
   res/image - qrc+all
   stm - all + 复制statelist.xml
2. .pro resource+=\
3. AppEntry.cpp - use mist
   ViewController.cpp - use mist

---------------------------------------------

Day 40

---------------------------------------------

1. C++ -> mist
2. 列出C++接口、QML内容、JS内容
   C++扩展QML
   JS扩展QML
   添加signal...to QML

3. wordpress modify template-> JS/html/CSS - crawler
4. linux/shell - iAutoci(compile)/此处打开终端/file browser/file cutter/file merger
5. C++ - crawler/engine(AppEntry)
6. English read / Japanese recite
7. apply 
8. exercise

JS - 面向对象
JS解释器 - 内存自动回收
Math对象 - 数学函数
JS算数溢出、下溢、零除 - 不报错 +-Infinity/0/NaN(判断x非数字用x!=x)
		      - 二进制浮点数 .3-.2 != .1
Date构造函数 new Date()
字符串 内置功能+ 属性length... 方法charAt(0)...返回新字符串
RegExp 正则表达式
布尔值 false - undefined null 0 -0 NaN ""
		typeof(null) - object
全局对象	全局属性 undefined, Infinity, NaN...
		全局函数 isNaN(), parseInt(), eval()...
		构造函数 Date(), RegExp(), String(), Object(), Array()...
		全局对象 Math, JSON... 
包装对象 	数字 布尔值 字符串 - 属性为只读 创建临时对象 Number() Boolean() String() Object()
对象转换为原始值 toString() / valueOf() / 异常
可变的对象引用	a===b false; var b = a; a===b true 
显式/隐式转换	String(xx)/xx.toString() 
		x+"" / +x / !!x->Boolean(x)
		n.toString(2/8/16) n.toFixed(..) n.toExponential(...) n.toPrecision(...)
JS作用域	函数作用域/声明提前，初始化不提前

cc - Button.qml(imgId/strId: NGQmlImage/NGQmlText/NGQmlMouseArea id??) 

---------------------------------------------

Day 41

---------------------------------------------

C语言，调试技巧
Linux上多媒体框架 性能调优 功耗调试
3D(OpenGl编程)

uncommited changes:
git reset --hard 恢复所有变化的文件之后
cd .repo/manifests目录下执行git stash命令，并通过git clean -f -d命令删除变化记录目录

1. 阅读NGQmlFramwork mist部分 - 画面切换
2. 学习iAuto-Linux多媒体框架 flash播放器?? think性能调优、功耗调试
3. 阅读cc部分 NGQml各控件id - languages 
   绘制画面
4. 学习iAuto-OpenGl编程 
5. 培训资料复习
6. DS&Algorithm C/C++
7. Linux C
8. modify resume

---------------------------------------------

JS匿名函数...
var - 全局对象的属性 未声明的变量/this.xxx 可删除 
作用域链
数组初始化 []
对象初始化 {}
属性访问 . / []-数组/对象
in运算符 "x" in point  "toString" in point  数组的in??
instanceof运算符 d instance of Date    d instance of Object 原型链
typeof运算符 typeof(null)/typeof null-"object"
eval运算符
delete运算符 删除对象属性/数组元素
void运算符

---------------------------------------------

Day 42

---------------------------------------------

1. DS&Algorithm C/C++ 
   LeetCode 20%
   函数指针?? ptr=max;
   explicite 防止由构造函数定义的隐式转换 只能用于类内部的构造函数声明上
       约定所有单参数的构造函数都必须是显示的
   template <typename T> struct Increase //函数对象:逑增一个T类对象 {
   	virtual void operator()(T& e) { e++; }
   }; //假讴T可直接逑增戒已重载++
   template <typename T> void increase(Vector<T> & V) //统一逑增向量中癿各元素 {
	V.traverse(Increase<T>());
   } //以Increase<T>()为基本操作迕行遍历
2. 学习iAuto-Linux多媒体框架 flash播放器?? think性能调优、功耗调试
   列出接口
   阅读Obigo Native APP 
3. wordpress
   后台卡
   http://www.xuanfengge.com/turn-off-automatic-loading-wordpress-open-sans-fonts.html
4. 培训资料复习

template <typename T> //在有序向量癿匙间[lo, hi)内,确定丌大亍e癿最后一个节点癿秩
Rank Vector<T>::search(T const& e, Rank lo, Rank hi) const {
	//assert: 0 <= lo < hi <= _size
	return (rand() % 2) ? //按各50%癿概率随机使用
		binSearch(_elem, e, lo, hi) : fibSearch(_elem, e, lo, hi); //二分查找戒Fibonacci查找
}

对象 null无原型
JS对象都是关联数组 支持[]访问 程序运行时可创建/修改

---------------------------------------------

Day 43

---------------------------------------------

1. 培训资料复习
2. 学习iAuto-Linux多媒体框架 
   gstreamer
   alsa lib util
   opengl egl
   wayland
3. USB - 绘制
4. JS学习 原型
   instance.showMsg();
   baseinstance.showMsg.call(instance);
   对象方法、类方法、原型方法
   http://www.z-vita.com/open/showarticle.php?getID=49

---------------------------------------------

Day 44

---------------------------------------------

进程：资源分配和调度的一个独立单位
      完成用户任务所需要的程序的一次执行过程和为其分配资源的一个基本单位，是一个具有独立功能的程序段对某个数据集的一次执行活动
      进程的控制表PCB
      进程切换时要切页表
线程：CPU调度和分派的基本单位 
      只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈）
      控制表TCB
      只需要保存线程的上下文（相关寄存器状态和栈的信息

存储过程优点：
1. 运行速度 - 存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般 SQL 语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。
2. 网络负荷 - 当对数据库进行复杂操作时(如对多个表进行 Update,Insert,Query,Delete 时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序来完成，就变成了一条条的 SQL 语句，可能要多次连接数据库。而换成存储，只需要连接一次数据库就可以了。
3. 团队开发 - 存储过程可以重复使用,可减少数据库开发人员的工作量。
4. 安全机制 - 安全性高,可设定只有某此用户才具有对指定存储过程的使用权。

static：
把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期
   在定义它的函数内有效，只是程序仅分配一次内存，函数返回后，该变量不会消失；局部变量在定义它的函数内有效，但是函数返回后失效。
把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围
   非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。
(2) static全局变量与普通的全局变量有什么区别：static全局变量只初始化一次，防止在其他文件单元中被引用;

(3) static局部变量和普通局部变量有什么区别：static局部变量只被初始化一次，下一次依据上一次结果值；
(4) static函数与普通函数有什么区别：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝.

在C中引入关键字static是为了表示退出一个块后仍然存在的局部变量。随后，static在C中有了第二种含义：用来表示不能被其它文件访问的全局变量和函数。为了避免引入新的关键字，所以仍使用static关键字来表示这第二种含义。最后，C++重用了这个关键字，并赋予它与前面不同的第三种含义：表示属于一个类而不是属于此类的任何特定对象的变量和函数

一般程序的由new产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。

画面绘制 - USB：
13个画面的btn、text、image放置完成（其上的文字、图片未设置）
阅读iAutoQt5-NativeApp-mediaplayer ui部分

明天的计划：
完成USB.js中的play(),pause(),repeat(),random函数 （不涉及调用底层代码）
阅读iAutoQt5-NativeApp-mediaplayer调用底层音乐播放部分

疑问：
画面中list部分也会制作CC?（list左边有index，右边有scrollbar）
tab部分是分成多个画面+mist连接?还是tab效果使用QML做出来
mist的使用 - statelist.xml中每个winscape的eventlist是如何添加的?
        （尝试 - 添加状态及状态对应的winscape、连接各状态（transition）不能实现画面迁移 是不是上面这个原因）
毕业设计提前

---------------------------------------------

Day 45

---------------------------------------------

绘制画面 - USB：
1. 完成USB.js中的play(),pause(),repeat(),random函数 （不涉及调用底层代码）
2. 阅读iAutoQt5-NativeApp-mediaplayer调用底层音乐播放部分
http://www.cnblogs.com/rollenholt/archive/2012/04/09/2439086.html

---------------------------------------------

Day 46

---------------------------------------------

1. 完成USB.js中的play(),pause(),repeat(),random函数 （不涉及调用底层代码）
2. 阅读iAutoQt5-NativeApp-mediaplayer调用底层音乐播放部分

const成员变量也不能在类定义处初始化，只能通过构造函数初始化列表进行，并且必须有构造函数。
const数据成员 只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const数据成员的值可以不同。所以不能在类的声明中初始化const数据成员，因为类的对象没被创建时，编译器不知道const数据成员的值是什么。
cosnt成员函数主要目的是防止成员函数修改对象的内容。即const成员函数不能修改成员变量的值，但可以访问成员变量。当方法成员函数时，该函数只能是const成员函数。

static成员函数主要目的是作为类作用域的全局函数。不能访问类的非静态数据成员。类的静态成员函数没有this指针，这导致：1、不能直接存取类的非静态成员变量，调用非静态成员函数2、不能被声明为virtual
类中的static变量是属于类的，不属于某个对象，它在整个程序的运行过程中只有一个副本，因此不能在定义对象时 对变量进行初始化，就是不能用构造函数进行初始化，其正确的初始化方法是：
数据类型 类名::静态数据成员名=值；

<span style="font-size:16px;">#include <cstdio>
#include <cstdlib>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

/*
* fibonacci的递归函数解法
* 优点：代码简单，易于理解
* 缺点：fib参数参数比较大时，运算量很大
*/
unsigned long long Fib_Recursive( unsigned int fib )
{
	if ( fib > 2 ) return ( Fib_Recursive(fib-1) + Fib_Recursive(fib-2) );
	else if ( 2 == fib ) return 2;
	else if ( 1 == fib ) return 1;
	return 1;
}

/*
* fibonacci的数组解法
* 优点：代码比较简单，也比较容易理解
* 缺点：fib多大就new多大的内存
*/
unsigned long long Fib_Array( unsigned int fib )
{
	unsigned long long result = 1;
	if ( fib > 2 )
	{
		unsigned long long *pArray = NULL;
		pArray = new unsigned long long[fib];
		pArray[0] = 1;
		pArray[1] = 2;
		unsigned int loop;
		for ( loop = 2 ; loop < fib; ++loop  )
		{
			pArray[loop] = pArray[loop-1] + pArray[loop-2];
		}
		result = pArray[loop-1];
		delete []pArray;
	}
	else if ( 2 == fib ) return 2;
	else if ( 1 == fib ) return 1;
	return result;
}

/*
* vector实现
*/
unsigned long long Fib_Vector( unsigned int fib )
{
	if ( fib > 2 )
	{
		vector<unsigned long long> resultVec;
		resultVec.reserve( fib );
		resultVec.push_back(1);
		resultVec.push_back(2);
		unsigned int i;
		for ( i = 2; i < fib; ++i )
		{
			resultVec.push_back( resultVec[i-1]+resultVec[i-2] );
		}
		return resultVec[i-1];
	}
	else if ( 2 == fib ) return 2;
	else if ( 1 == fib ) return 1;
	return 1;
}

/*
* queue实现
*/
unsigned long long Fib_Queue( unsigned int fib )
{
	if ( fib > 2 )
	{
		queue<unsigned long long> resultQueue;
		resultQueue.push(1);
		resultQueue.push(2);
		for (unsigned int i = 2; i < fib; ++i )
		{
			resultQueue.push(resultQueue.front() + resultQueue.back());
			resultQueue.pop();
		}
		return resultQueue.back();
	}
	else if ( 2 == fib ) return 2;
	else if ( 1 == fib ) return 1;
	return 1;
}

/*
* 迭代实现
*/
unsigned long long Fib_Iteration( unsigned int fib )
{
	if ( fib > 2 )
	{
		unsigned long long a1 = 1, a2 = 2, a3 = 0;
		unsigned int i;
		for (i=0; i<fib-2; ++i)
		{
			a3 = a1 + a2;
			a1 = a2;
			a2 = a3;
		}
		return a3;
	}
	else if ( 2 == fib ) return 2;
	else if ( 1 == fib ) return 1;
	return 1;
}

/*
* 公式实现 
* 缺点:有误差 
*/
unsigned long long Fib_Formula( unsigned int fib )
{
	if ( fib > 0 )
	{
		double square_root_5=sqrt((double)5);           
		return (pow((1+square_root_5),(double)(fib+1))-pow((1-square_root_5),(double)(fib+1)))/(pow((double)2,(double)(fib+1))*square_root_5);
	}
	return 1;
}

int main(int argc, char **argv)
{
	unsigned int i;
	for ( i = 0; i <= 20; ++i )
	{
		printf(" %lld\t%lld\t%lld\t%lld\t%lld\t%lld\n",Fib_Recursive(i),Fib_Array(i),Fib_Vector(i),Fib_Queue(i),Fib_Iteration(i),Fib_Formula(i));
	}

#ifdef _WIN32
	system("pause");
#endif
	return 0;
}</span>

---------------------------------------------

Day 47

---------------------------------------------

1. 安装最新sdk
2. 尝试mist切换画面

---------------------------------------------

Day 48

---------------------------------------------

1 Job Title: System Design Software Engineer (GPU Architect)
Department: GPU
Location: Shanghai
JobDescription/Requirements:
Responsibilities:
-      We are looking for world class engineers to design, model, analyzeand verify next generations of GPU architecture.
-      The candidates will work with a group of architects to design anddevelop proprietary internal tools for the visualization, analysis, and debugand verification of tests and applications on various functional andperformance simulations of future chips.
-      
-      The candidates will have opportunities to get involved incutting-edge GPU macro- and micro-architecture design, verification andoptimization, including porting commercial applications to test benches, identifyingperformance hotspots and data mining for performance analysis.
-      NVIDIA需要世界级的工程师与我们一起对未来的GPU体系结构进行设计，分析，建模与验证。
-      应聘者将与一组架构师一起，设计和开发自有知识产权的工具，用于分析、验证和调试GPU芯片的功能与性能。
-      应聘者将有机会参与世界领先的GPU设计、验证与优化工作，包括将商用程序移植为测试用例，分析系统的性能热点以及为性能分析进行数据挖掘等。
Requirements:

-      Bachelor’s Degree or higher majoring inCS/EE/Mathematics or relevant fields
-      Strong C/C++ programming ability. Scripting language(Perl, Python, Ruby) experience is a plus.
-      Strong problem solving capability, analytical andcommunication skills.
-      Proactive, creative and a team player.
-      Excellent English writing for engineeringdocumentation, English oral well enough to attend meetings.
-      Experience in the following areas is a plus:
-      Microprocessor architecture design & verification.
-      3D graphics (D3D or OpenGL) application development.
-      Multimedia (video, image processing, visualization)application development
-      System level programming experience in OS, compiler,driver, tools, virtual memory system, etc.
-      Parallel computing/CUDA/OpenCL/HPC development.
-      本科以上学历，计算机/电子/数学或相关专业。
-      较强的C/C++编程能力。熟悉脚本语言(Perl, Python, Ruby)尤佳。
-      思维条理清楚，解决问题能力强，善于沟通。
-      积极主动，具有创造力和团队精神。
-      英文听说读写出色，可以用英文撰写技术文档和参加会议。
-      具备下列领域相关经验者尤佳：
-      微处理器体系结构设计或验证
-      3D图形软件开发（D3D或OpenGL）
-      多媒体软件开发（视频，图像处理，数据可视化）
-      系统级编程经验（操作系统，编译器，驱动程序，除错工具，虚拟内存系统等）
-      并行计算/CUDA/OpenCL/HPC开发
————————————————————————————————————

4. Position: Embedded System Software Engineer
Department: SW
Location:Shanghai
Job Description:
Thecandidate will participate in the Android-based software development forNVIDIA's new Tegra platforms including but not limited to Android based devicesdrivers, multimedia, frameworks, kernel and performance/power optimization.
Youwill have the opportunity to seamlessly work with HQ for cutting edgetechnologies, and also have opportunity and flexibility to create newinnovations.
RESPONSIBILITIES:
-Design and implement software in an embedded software environment.
-New technology research and system architecture design.
-Work with hardware architects on the design of embedded products, providingfeedback and guidance on CPU, bus, and device design to ensure that it can besupported well by software.
MINIMUM REQUIREMENTS:
-BS or MS degree in EE/CS/CE
-Excellent C programming and debugging skills.
-Ability for strong problem solving and logical analysis skills.
-Ability for good English reading and writing.
-Good knowledge of operation system (esp. Android, Linux) is a major plus.
-Good knowledge of communication technology (LTE, WCDMA etc) is a plus.
岗位描述：
为英伟达最新Tegra芯片开发基于Android平台的软件，包括但不限于Linux内核驱动、多媒体框架、性能优化、功耗调试等。
在这里您将有机会在业界领先的公司参与最新技术的研究与开发，并让您有机会展现你无限的创造力。
工作职责：
-基于Android平台的软件设计与开发
-新技术的研究与实现
-实现Tegra参考设计的软件需求，并给出反馈意见及建议
职位要求：
-计算机，通信，电子相关专业的学士或硕士（或同等学历）
-精通C编程以及调试技巧
-对创新及解决具有挑战性的问题充满激情
-具有较强的英文沟通能力
-熟悉Android，Linux优先
-熟悉通信技术（LTE、WCDMA）优先
---------------------------------------------

1. nv笔面题难度 DLUT进入可能 待遇提升/年
2. 式样学习任务思考
3. 3本书各10题 做
4. DS基础撸5个
5. 口语practice topic (PC history) 
   BEC (meeting specialize)   --(project experience)
6. Mist迁移学习 USB实现迁移
7. App性能、robusty如何做、如何测
8. USB画面担当 think list实现等 王兴积
9. DB锁学习
10.iAuto架构 芯片等供应公司

---------------------------------------------

Day 49 x

---------------------------------------------

pointer review

---------------------------------------------

Day 50

---------------------------------------------

1. 式样学习
2. thread
对‘pthread_create’未定义的引用 - gcc -o thread -pthread thread.c
http://blog.csdn.net/morewindows/article/details/7392749

---------------------------------------------

Day 51

---------------------------------------------

1. 阅读NativeApp MediaPlayer-list部分
   MediaPlayer/Most make error 看不到list效果 。。。 
2. 阅读functioncontroll-涉及list部分
3. USB绘制-1/2屏、1/4屏
4. 式样学习
   Chapter07-01_USB(Music)_Screen_Specification_Ver1.00

gcc gdb_sample.c -o gdb_sample -g (可执行文件加入调试信息)
gdb
file gdb_sample --load
l --list source code
b (function name/line no) --add break point
r/c/s/n --run/continue/step/next
p (variable name) --print

display /i $pc --开启汇编模式??
si/ni
i r 
i r (register name)

info b --break info
d --delete break
bt --show function's heap stack
finish --速度完成function

http://blog.csdn.net/haoel/article/details/2879
http://blog.csdn.net/liigo/article/details/582231

---------------------------------------------

Day 52

---------------------------------------------

1. USB绘制
   画面绘制(playmode-artist & playmode-artist after & 1/2 屏)
   添加相应list
   USB部分完成情况：
   (tab部分不确定如何制作；list cc部分制作未完善-不能index jump；FC部分学习中；USB内画面迁移明天尝试做)

2. 式样学习
   239 Operation Spec相关

Linux中.a,.la,.o,.so文件的意义和编程实现_百度文库

48～57为0到9十个阿拉伯数字
65～90为26个大写英文字母
97～122号为26个小写英文字母

if - else if -...

帕斯卡/杨辉三角 组合数C(i,k) L/R，pathlen

http://dongxicheng.org/structure/structure-algorithm-summary/

---------------------------------------------

Day 53

---------------------------------------------

1. USB绘制
   USB内画面迁移 base->playmode->list (画面返回调试中)
2. 式样学习
   239 Operation Spec相关

---------------------------------------------

Day 54

---------------------------------------------

1. USBlist控件更新
2. USB内画面迁移完善（返回等）
   tab怎么做 -> rulebook
   画大致迁移图 -> liuquan
3. list如何通过FC取数据 - ...10.69
4. 01背包 树堆8题
   线性：数组，链表，队列，堆栈，块状数组（数组+链表），hash表，双端队列，位图（bitmap）
   树：堆（大顶堆、小顶堆），trie树（字母树or字典树），后缀树，后缀树组，二叉排序/查找树，B+/B-，AVL树，Treap，红黑树，splay树，线段树，树状数组
5. login 


1. USB list控件更新(区分ListItem ID, 添加scroll text效果)
2. USB内画面迁移完善（返回等）
   tab怎么做 -> rulebook
   画大致迁移图 -> liuquan
3. list如何通过FC取数据 - ...10.69

---------------------------------------------

Day 55

---------------------------------------------

http://blog.jenniferdewalt.com/archive
1. CSS
2. filezilla local->git
3. 式样学习 rulebook
4. list相关fc
5. JS
6. C++ copy constructor destructor opoverwrite
   基础

git log --graph --pretty=oneline
git reset commitID

h1 h2
ul ol dl
strong em
blockquote cite
abbr acronym code
fieldset legend label
caption thead tbody tfoot

limited elements -> solution:
0. xml
a. html5
b. #ID/.class 唯一/

div 块级元素分组 分割文档
span 行内元素分组
微格式 hCalendar ...9

哪些可用：
页面DOCTYPE（DTD文档类型定义） -> choose html version strict/transitional
a. 有效性验证 -> 工具
b. 浏览器模式 DOCTYPE切换 严格DTD/过渡DTD+URI 标准模式 ... 混杂模式

常用选择器： - browser异
类型选择器
后代选择器
伪类选择器 元素+条件 动态伪类...（链接伪类）
通用选择器 *{padding: 0; margin: 0;}
高级选择器 
    子选择器> tree -l 1 /后代+通用
    相邻同胞选择器
属性选择器 有无/值 

样式顺序：
层叠

样式冲突：
特殊性
SUM(选择器) 出现无效CSS->可能样式冲突 父+ID
<body class="news">覆盖样式 ID编写特定页面 class编写设计/格局

继承：
继承而来的特殊性为空

链接样式表 <link href="/css/xx.css" rel="stylesheet" type="text/css" />
导入样式表 @import url(/css/yy.css);
分割-浏览器下载

CSS文档结构
注释
去空格+注释+优化
压缩/not

2级导航？

---------------------------------------------

Day 56

---------------------------------------------


   





























